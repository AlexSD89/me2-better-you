# AI Investment MRR Tracker - Docker Compose Configuration
version: '3.8'

# Network definitions
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume definitions
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

services:
  # ================================
  # PostgreSQL Database
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: ai-mrr-tracker-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-ai_mrr_tracker}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-ai_mrr_tracker}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      app-network:
        ipv4_address: 172.20.0.2
    command: >
      postgres
        -c max_connections=200
        -c shared_buffers=128MB
        -c effective_cache_size=256MB
        -c maintenance_work_mem=64MB
        -c checkpoint_completion_target=0.9
        -c wal_buffers=16MB
        -c default_statistics_target=100
        -c random_page_cost=1.1
        -c effective_io_concurrency=200
        -c work_mem=4MB
        -c min_wal_size=1GB
        -c max_wal_size=4GB

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: ai-mrr-tracker-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      app-network:
        ipv4_address: 172.20.0.3
    sysctls:
      net.core.somaxconn: 1024

  # ================================
  # Application (Development)
  # ================================
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ai-mrr-tracker-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
      - app_logs:/app/logs
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-ai_mrr_tracker}
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-development-secret-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      app-network:
        ipv4_address: 172.20.0.4
    profiles:
      - dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # Application (Production)
  # ================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: ai-mrr-tracker-prod
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - app_logs:/app/logs
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-ai_mrr_tracker}
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      app-network:
        ipv4_address: 172.20.0.5
    profiles:
      - prod
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ================================
  # Data Collection Worker
  # ================================
  collector:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: ai-mrr-tracker-collector
    restart: unless-stopped
    volumes:
      - app_logs:/app/logs
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-ai_mrr_tracker}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WORKER_TYPE=collector
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - workers
      - prod
    command: ["npm", "run", "collect"]
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 256M
          cpus: '0.1'

  # ================================
  # Investment Analysis Worker
  # ================================
  analyzer:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: ai-mrr-tracker-analyzer
    restart: unless-stopped
    volumes:
      - app_logs:/app/logs
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD:-postgres}@postgres:5432/${DATABASE_NAME:-ai_mrr_tracker}
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - WORKER_TYPE=analyzer
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - workers
      - prod
    command: ["npm", "run", "analyze"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ================================
  # Nginx Reverse Proxy (Production)
  # ================================
  nginx:
    image: nginx:alpine
    container_name: ai-mrr-tracker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/ssl/certs:ro
      - app_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      app-network:
        ipv4_address: 172.20.0.10
    profiles:
      - prod
      - nginx
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Monitoring - Prometheus
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-mrr-tracker-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    profiles:
      - monitoring

  # ================================
  # Monitoring - Grafana
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: ai-mrr-tracker-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - app-network
    profiles:
      - monitoring

# Additional volume definitions for monitoring
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local