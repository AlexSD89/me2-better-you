# LaunchX-BMAD融合配置
# 将BMAD的工业级流程与LaunchX的AI自动化能力完美融合

fusion_config:
  version: "1.0"
  integration_type: "cc_driven_bmad"
  
  # 核心能力配置
  core_capabilities:
    bmad_workflow: true          # 保留完整BMAD工作流程
    cc_interface: true           # Claude Code对话框驱动
    intelligent_routing: true    # 智能Agent路由
    context_injection: true      # 自动上下文注入
    quality_gates: true          # 质量门禁控制

  # Agent生态配置  
  agent_ecosystem:
    source_directory: ".claude/agents"
    total_agents: 7
    
    categories:
      development: "💻_development"     # 开发类agents
      business: "💼_business"          # 业务类agents  
      shared: "🔄_shared"              # 通用类agents
    
    intelligent_selection: true        # 智能选择agents
    parallel_execution: true           # 并行执行支持
    context_sharing: true              # agents间上下文共享

  # BMAD核心流程保留
  bmad_core:
    workflow_preservation: "complete"  # 完整保留工作流程
    story_production: true             # Story生产链条
    quality_control: true              # 质量控制体系
    template_system: true              # 模板系统
    checklist_system: true             # 检查清单系统
    
    # 核心任务保留 (本地化)
    core_tasks:
      - ".claude/commands/create-doc.md"
      - ".claude/commands/create-next-story.md"  
      - ".claude/commands/review-story.md"
      - ".claude/commands/risk-profile.md"
      - ".claude/commands/test-design.md"
      - ".claude/commands/qa-gate.md"
    
    # 模板系统保留 (指向原始位置)
    core_templates:
      - ".claude/bmad-core/templates/project-brief-tmpl.yaml"
      - ".claude/bmad-core/templates/prd-tmpl.yaml"
      - ".claude/bmad-core/templates/architecture-tmpl.yaml"
      - ".claude/bmad-core/templates/story-tmpl.yaml"

  # Claude Code接口配置
  cc_interface:
    activation_method: "natural_language"  # 自然语言激活
    command_style: "conversational"        # 对话式命令
    fallback_commands: true                # 支持快速命令
    
    # 智能识别关键词
    trigger_keywords:
      full_project: ["创建", "构建", "开发", "系统", "平台", "项目"]
      story_creation: ["Story", "故事", "需求", "功能"]
      development: ["实现", "编码", "开发"]
      analysis: ["分析", "研究", "调研", "评估"]
      optimization: ["优化", "改进", "提升", "修复"]

  # 项目类型和Agent映射
  project_mapping:
    ai_ml_projects:
      agents: [ai-engineer, ml-engineer, data-scientist, python-expert]
      bmad_workflow: "full"
      complexity: "high"
      
    web_applications:
      agents: [frontend-developer, backend-developer, typescript-expert, ui-designer]
      bmad_workflow: "full"  
      complexity: "medium"
      
    mobile_applications:
      agents: [mobile-developer, ui-designer, ux-expert, backend-developer]
      bmad_workflow: "full"
      complexity: "medium"
      
    trading_systems:
      agents: [python-expert, quant-analyst, risk-manager, performance-engineer]
      bmad_workflow: "full"
      complexity: "high"
      
    enterprise_systems:
      agents: [backend-architect, security-auditor, cloud-architect, deployment-engineer]
      bmad_workflow: "full"
      complexity: "enterprise"

  # 质量控制配置
  quality_control:
    enforcement_level: "enterprise"     # standard|strict|enterprise
    automatic_checks: true             # 自动质量检查
    gate_controls: true                 # 质量门禁控制
    
    # 质量检查agents
    qa_agents:
      primary: "qa"
      security: "security-auditor"
      performance: "performance-engineer"  
      code_quality: "code-reviewer"
      testing: "test-automator"

  # 上下文管理配置
  context_management:
    auto_injection: true                # 自动注入上下文
    smart_filtering: true               # 智能过滤相关信息
    document_tracking: true             # 文档状态跟踪
    
    # 核心上下文文件 (本地化)
    core_documents:
      - "docs/project-brief.md"
      - "docs/prd.md"  
      - "docs/architecture.md"
      - ".claude/bmad-core/data/technical-preferences.md"
      - ".claude/bmad-core/data/bmad-kb.md"

  # 输出文件配置
  output_structure:
    documentation_path: "docs/"
    source_code_path: "src/"
    tests_path: "tests/"
    stories_path: "docs/stories/"
    
    # 自动生成文件  
    auto_generated:
      - "docs/project-brief.md"
      - "docs/prd.md"
      - "docs/architecture.md"
      - "docs/stories/*.story.md"

# 使用说明
usage_instructions: |
  这个配置文件定义了LaunchX与BMAD的完整融合方案。
  
  关键特性:
  1. 保留BMAD完整的工业级开发流程
  2. 通过Claude Code自然语言对话驱动  
  3. 智能调度60个专业agents
  4. 维护严格的质量控制体系
  5. 支持从简单任务到企业级项目的全覆盖
  
  使用方式:
  - 在Claude Code中直接用中文对话描述需求
  - 系统智能识别项目类型和复杂度
  - 自动选择最佳agent组合和工作流程
  - 生成符合BMAD标准的文档和代码
  
  这是真正的"AI车床"系统 - 输入想法，输出完整项目！