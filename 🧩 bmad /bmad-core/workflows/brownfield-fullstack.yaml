# <!-- Powered by BMAD™ Core -->
workflow:
  id: brownfield-fullstack
  name: Brownfield Full-Stack Enhancement
  description: >-
    brownfield（棕地）项目的智能增强工作流。专门处理现有系统的功能扩展、现代化改造和安全集成。
    通过多轮深度分析，让解决方案在现有约束中自然演进和完善，确保改进过程中的系统稳定性和向后兼容性。
    
    **核心理念**: 渐进式改进思维成长模式。每个改进轮次内部包含无数个小循环：现状分析→风险评估→改进方案→验证测试→再分析→再优化。
    这种循环嵌套模式让系统改进在微观层面持续验证，在宏观层面系统升级。
  type: brownfield
  project_types:
    - feature-addition
    - refactoring
    - modernization
    - integration-enhancement

  sequence:
    - step: enhancement_classification
      agent: analyst
      action: classify enhancement scope
      methodology: "intelligent_complexity_assessment"
      思维成长重点:
        contextual_understanding:
          - 深入理解现有系统架构和技术债务情况
          - 识别改进需求背后的根本原因和业务驱动
          - 明确成功的定义和风险承受度
        
        enhancement_scope_mapping:
          - 构建改进范围的整体框架和影响评估
          - 识别关键的约束条件和兼容性要求
          - 建立改进方案的核心逻辑和风险控制
        
        risk_coherence:
          - 确保改进方案与现有系统的一致性
          - 验证方案与业务需求的对齐度
          - 识别需要进一步深化验证的领域
      
      智能判断框架:
        微小改进: "单一故事，4小时内完成，无架构影响"
        功能增强: "1-3个故事，局部功能扩展，最小架构调整"
        重大改进: "多个史诗级改进，需要架构重构和全面规划"
      
      notes: |
        通过智能对话理解改进复杂度，动态路由到合适的处理路径：
        - 微小改进：直接使用 brownfield-create-story 任务
        - 功能增强：使用 brownfield-create-epic 任务
        - 重大改进：继续完整的多轮优化工作流
        
        智能提问："请描述您希望的改进范围？这是一个小修复、功能添加、还是需要架构变更的重大改进？"

    - step: routing_decision
      condition: based_on_classification
      routes:
        single_story:
          agent: pm
          uses: brownfield-create-story
          notes: "Create single story for immediate implementation. Exit workflow after story creation."
        small_feature:
          agent: pm
          uses: brownfield-create-epic
          notes: "Create focused epic with 1-3 stories. Exit workflow after epic creation."
        major_enhancement:
          continue: to_next_step
          notes: "Continue with comprehensive planning workflow below."

    - step: documentation_check
      agent: analyst
      action: check existing documentation
      condition: major_enhancement_path
      methodology: "intelligent_documentation_assessment"
      
      文档质量智能评估:
        completeness_analysis:
          - 系统架构文档的完整性和时效性评估
          - API规格说明和编码标准的现状分析
          - 技术债务和历史演进脉络的清晰度
        
        gap_identification:
          - 识别文档缺失的关键领域和盲区
          - 评估现有文档对改进规划的支撑度
          - 确定需要补充的核心信息和背景
        
        quality_threshold:
          - 文档质量达标：直接进入PRD创建阶段
          - 文档质量不足：先执行 document-project 任务
          - 动态决策基于智能评估结果
      
      notes: |
        智能评估现有项目文档的充分性：
        - 查找现有架构文档、API规格、编码标准
        - 评估文档的时效性和全面性
        - 如果充分：跳过文档化，直接进入PRD
        - 如果不足：先运行 document-project 任务

    - step: project_analysis
      agent: architect
      action: analyze existing project and use task document-project
      creates: brownfield-architecture.md (or multiple documents)
      condition: documentation_inadequate
      methodology: "comprehensive_system_archaeology"
      
      系统考古学方法:
        current_state_mapping:
          - 深度挖掘系统当前状态和运行机制
          - 识别隐藏的技术债务和性能瓶颈
          - 梳理系统演进历史和架构决策脉络
        
        constraint_excavation:
          - 发现系统约束条件和依赖关系
          - 分析历史遗留问题和兼容性要求
          - 识别改进过程中的风险点和注意事项
        
        foundation_establishment:
          - 为后续PRD创建建立坚实的现状基础
          - 确保改进方案基于真实的系统现状
          - 传递关键发现和约束条件给PRD设计
      
      notes: "运行 document-project 任务，深度挖掘系统现状、技术债务和约束条件。将关键发现传递给PRD创建阶段。"

    - agent: pm
      creates: prd.md
      uses: brownfield-prd-tmpl
      requires: existing_documentation_or_analysis
      methodology: "adaptive_prd_synthesis"
      
      智能适应性PRD综合:
        context_integration:
          - 智能整合 document-project 的输出结果，避免重复分析
          - 有机融合现有项目文档和系统背景
          - 基于现状约束调整需求优先级和实施策略
        
        enhancement_strategy:
          - 制定渐进式改进策略，确保系统稳定性
          - 识别关键的依赖关系和风险控制点
          - 设计向后兼容和平滑迁移的实施路径
        
        validation_framework:
          - 确保改进方案与现有系统的有机统一
          - 验证改进目标与业务价值的对齐度
          - 建立清晰的成功标准和验收条件
      
      notes: |
        为重大增强创建 PRD。如果运行了 document-project，引用其输出以避免重复分析。
        如果跳过，使用现有项目文档。
        保存输出：将最终的 prd.md 复制到项目的 docs/ 文件夹。

    - step: architecture_decision
      agent: pm/architect
      action: determine if architecture document needed
      condition: after_prd_creation
      methodology: "intelligent_architecture_decision"
      
      架构决策智能分析:
        impact_assessment:
          - 分析改进对现有架构模式的影响程度
          - 评估新技术库和框架的引入必要性
          - 检查平台和基础设施变更的复杂度
        
        pattern_analysis:
          - 识别是否需要引入新的架构模式
          - 判断现有模式是否可以满足改进需求
          - 评估架构演进的必要性和可行性
        
        decision_matrix:
          - 需要架构文档：新模式、新技术、平台变更
          - 直接进入故事创建：遵循现有模式和约束
          - 基于智能分析结果进行动态路由
      
      notes: |
        审查 PRD 以确定是否需要架构规划：
        - 新架构模式 → 创建架构文档
        - 新库/框架 → 创建架构文档
        - 平台/基础设施变更 → 创建架构文档
        - 遵循现有模式 → 跳过到故事创建

    - agent: architect
      creates: architecture.md
      uses: brownfield-architecture-tmpl
      requires: prd.md
      condition: architecture_changes_needed
      methodology: "brownfield_architecture_optimization"
      
      棕地架构优化策略:
        evolution_planning:
          - 设计从现有架构到目标架构的平滑迁移路径
          - 识别关键的架构节点和依赖关系
          - 制定分阶段的架构演进策略
        
        compatibility_assurance:
          - 确保新架构与现有系统的兼容性
          - 设计向后兼容的接口和迁移策略
          - 识别和缓解架构变更的风险点
        
        implementation_roadmap:
          - 提供详细的实施路线图和里程碑
          - 建立架构变更的验证和测试策略
          - 确保架构文档的可操作性和可维护性
      
      notes: "仅为重大架构变更创建架构文档。保存输出：将最终的 architecture.md 复制到项目的 docs/ 文件夹。"

    - agent: po
      validates: all_artifacts
      uses: po-master-checklist
      notes: "Validates all documents for integration safety and completeness. May require updates to any document."

    - agent: various
      updates: any_flagged_documents
      condition: po_checklist_issues
      notes: "If PO finds issues, return to relevant agent to fix and re-export updated documents to docs/ folder."

    - agent: po
      action: shard_documents
      creates: sharded_docs
      requires: all_artifacts_in_project
      notes: |
        Shard documents for IDE development:
        - Option A: Use PO agent to shard: @po then ask to shard docs/prd.md
        - Option B: Manual: Drag shard-doc task + docs/prd.md into chat
        - Creates docs/prd/ and docs/architecture/ folders with sharded content

    - agent: sm
      action: create_story
      creates: story.md
      requires: sharded_docs_or_brownfield_docs
      repeats: for_each_epic_or_enhancement
      notes: |
        Story creation cycle:
        - For sharded PRD: @sm → *create (uses create-next-story)
        - For brownfield docs: @sm → use create-brownfield-story task
        - Creates story from available documentation
        - Story starts in "Draft" status
        - May require additional context gathering for brownfield

    - agent: analyst/pm
      action: review_draft_story
      updates: story.md
      requires: story.md
      optional: true
      condition: user_wants_story_review
      notes: |
        OPTIONAL: Review and approve draft story
        - NOTE: story-review task coming soon
        - Review story completeness and alignment
        - Update story status: Draft → Approved

    - agent: dev
      action: implement_story
      creates: implementation_files
      requires: story.md
      notes: |
        Dev Agent (New Chat): @dev
        - Implements approved story
        - Updates File List with all changes
        - Marks story as "Review" when complete

    - agent: qa
      action: review_implementation
      updates: implementation_files
      requires: implementation_files
      optional: true
      notes: |
        OPTIONAL: QA Agent (New Chat): @qa → review-story
        - Senior dev review with refactoring ability
        - Fixes small issues directly
        - Leaves checklist for remaining items
        - Updates story status (Review → Done or stays Review)

    - agent: dev
      action: address_qa_feedback
      updates: implementation_files
      condition: qa_left_unchecked_items
      notes: |
        If QA left unchecked items:
        - Dev Agent (New Chat): Address remaining items
        - Return to QA for final approval

    - repeat_development_cycle:
      action: continue_for_all_stories
      notes: |
        Repeat story cycle (SM → Dev → QA) for all epic stories
        Continue until all stories in PRD are complete

    - agent: po
      action: epic_retrospective
      creates: epic-retrospective.md
      condition: epic_complete
      optional: true
      notes: |
        OPTIONAL: After epic completion
        - NOTE: epic-retrospective task coming soon
        - Validate epic was completed correctly
        - Document learnings and improvements

    - workflow_end:
      action: project_complete
      notes: |
        All stories implemented and reviewed!
        Project development phase complete.

        Reference: {root}/data/bmad-kb.md#IDE Development Workflow

  flow_diagram: |
    ```mermaid
    graph TD
        A[Start: Brownfield Enhancement] --> B[analyst: classify enhancement scope]
        B --> C{Enhancement Size?}
        
        C -->|Single Story| D[pm: brownfield-create-story]
        C -->|1-3 Stories| E[pm: brownfield-create-epic]
        C -->|Major Enhancement| F[analyst: check documentation]
        
        D --> END1[To Dev Implementation]
        E --> END2[To Story Creation]
        
        F --> G{Docs Adequate?}
        G -->|No| H[architect: document-project]
        G -->|Yes| I[pm: brownfield PRD]
        H --> I
        
        I --> J{Architecture Needed?}
        J -->|Yes| K[architect: architecture.md]
        J -->|No| L[po: validate artifacts]
        K --> L
        
        L --> M{PO finds issues?}
        M -->|Yes| N[Fix issues]
        M -->|No| O[po: shard documents]
        N --> L
        
        O --> P[sm: create story]
        P --> Q{Story Type?}
        Q -->|Sharded PRD| R[create-next-story]
        Q -->|Brownfield Docs| S[create-brownfield-story]
        
        R --> T{Review draft?}
        S --> T
        T -->|Yes| U[review & approve]
        T -->|No| V[dev: implement]
        U --> V
        
        V --> W{QA review?}
        W -->|Yes| X[qa: review]
        W -->|No| Y{More stories?}
        X --> Z{Issues?}
        Z -->|Yes| AA[dev: fix]
        Z -->|No| Y
        AA --> X
        Y -->|Yes| P
        Y -->|No| AB{Retrospective?}
        AB -->|Yes| AC[po: retrospective]
        AB -->|No| AD[Complete]
        AC --> AD

        style AD fill:#90EE90
        style END1 fill:#90EE90
        style END2 fill:#90EE90
        style D fill:#87CEEB
        style E fill:#87CEEB
        style I fill:#FFE4B5
        style K fill:#FFE4B5
        style O fill:#ADD8E6
        style P fill:#ADD8E6
        style V fill:#ADD8E6
        style U fill:#F0E68C
        style X fill:#F0E68C
        style AC fill:#F0E68C
    ```

  decision_guidance:
    when_to_use:
      - Enhancement requires coordinated stories
      - Architectural changes are needed
      - Significant integration work required
      - Risk assessment and mitigation planning necessary
      - Multiple team members will work on related changes

  handoff_prompts:
    classification_complete: |
      Enhancement classified as: {{enhancement_type}}
      {{if single_story}}: Proceeding with brownfield-create-story task for immediate implementation.
      {{if small_feature}}: Creating focused epic with brownfield-create-epic task.
      {{if major_enhancement}}: Continuing with comprehensive planning workflow.

    documentation_assessment: |
      Documentation assessment complete:
      {{if adequate}}: Existing documentation is sufficient. Proceeding directly to PRD creation.
      {{if inadequate}}: Running document-project to capture current system state before PRD.

    document_project_to_pm: |
      Project analysis complete. Key findings documented in:
      - {{document_list}}
      Use these findings to inform PRD creation and avoid re-analyzing the same aspects.

    pm_to_architect_decision: |
      PRD complete and saved as docs/prd.md. 
      Architectural changes identified: {{yes/no}}
      {{if yes}}: Proceeding to create architecture document for: {{specific_changes}}
      {{if no}}: No architectural changes needed. Proceeding to validation.

    architect_to_po: "Architecture complete. Save it as docs/architecture.md. Please validate all artifacts for integration safety."

    po_to_sm: |
      All artifacts validated. 
      Documentation type available: {{sharded_prd / brownfield_docs}}
      {{if sharded}}: Use standard create-next-story task.
      {{if brownfield}}: Use create-brownfield-story task to handle varied documentation formats.

    sm_story_creation: |
      Creating story from {{documentation_type}}.
      {{if missing_context}}: May need to gather additional context from user during story creation.

    complete: "All planning artifacts validated and development can begin. Stories will be created based on available documentation format."
