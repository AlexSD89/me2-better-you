# <!-- Powered by BMAD™ Core -->
workflow:
  id: greenfield-fullstack
  name: Greenfield Full-Stack Application Development
  description: >-
    greenfield（绿地）项目的智能全栈开发工作流。专门处理从概念到实现的完整产品开发流程。
    通过多轮深度验证，让产品方案在市场调研和技术验证中自然演进和完善，确保产品市场适配性和技术可行性。
    
    **核心理念**: 市场驱动的产品创新模式。每个开发轮次内部包含无数个验证循环：
    市场调研→竞品分析→技术验证→用户验证→产品迭代→再验证。
    这种验证驱动模式让产品在市场反馈中持续优化，在技术实现中保持创新领先。
  type: greenfield
  project_types:
    - web-app
    - saas
    - enterprise-app
    - prototype
    - mvp

  sequence:
    - agent: analyst
      creates: project-brief.md
      methodology: "intelligent_market_opportunity_analysis"
      
      市场机会智能分析:
        opportunity_identification:
          - 通过搜索和外部信息验证市场机会的真实性
          - 识别目标用户的核心痛点和未满足需求
          - 分析技术趋势和商业模式创新机会
        
        competitive_landscape_research:
          - 系统性竞品分析和差异化机会识别
          - 通过批判性思维识别现有解决方案的不足
          - 构建清晰的产品定位和竞争优势
        
        feasibility_validation:
          - 技术可行性和资源需求的现实评估
          - 商业模式和盈利路径的逻辑验证
          - 风险因素识别和缓解策略设计
      
      optional_steps:
        - brainstorming_session
        - market_research_prompt
      notes: "市场驱动的项目概要生成。通过深度市场调研和竞品分析，确保项目概要基于真实市场机会。保存输出：将最终的 project-brief.md 复制到项目的 docs/ 文件夹。"

    - agent: pm
      creates: prd.md
      requires: project-brief.md
      methodology: "market_validated_product_requirements"
      
      思维成长重点:
        market_requirements_synthesis:
          - 基于市场调研结果设计产品核心功能和特性
          - 通过用户访谈和反馈验证需求的真实性
          - 建立清晰的产品价值主张和用户价值链
        
        competitive_differentiation:
          - 通过批判性分析竞品功能设计差异化特性
          - 识别竞品的功能缺陷和用户痛点
          - 设计突破性的产品体验和商业模式
        
        technical_feasibility_alignment:
          - 确保产品需求与技术能力和资源的匹配
          - 验证核心功能的技术实现路径
          - 设计渐进式的产品迭代和发布策略
      
      notes: "基于项目概要创建市场验证的PRD。通过外部信息验证需求的市场价值，通过批判性思维设计差异化功能。保存输出：将最终的 prd.md 复制到项目的 docs/ 文件夹。"

    - agent: ux-expert
      creates: front-end-spec.md
      requires: prd.md
      methodology: "user_centered_experience_design"
      
      用户中心的体验设计:
        user_behavior_research:
          - 通过搜索和外部用户研究验证设计假设
          - 分析目标用户的行为模式和使用场景
          - 收集真实的用户反馈和痛点案例
        
        interaction_pattern_optimization:
          - 通过批判性分析现有交互模式的局限性
          - 设计创新的交互流程和用户体验
          - 建立以用户为中心的设计原则和规范
        
        accessibility_and_usability:
          - 确保设计的可访问性和易用性
          - 验证设计方案在不同设备和场景下的适用性
          - 建立用户体验测试和持续优化机制
      
      optional_steps:
        - user_research_prompt
      notes: "创建以用户为中心的UI/UX规格说明。通过用户研究验证设计决策，通过批判性思维优化交互体验。保存输出：将最终的 front-end-spec.md 复制到项目的 docs/ 文件夹。"

    - agent: ux-expert
      creates: v0_prompt (optional)
      requires: front-end-spec.md
      condition: user_wants_ai_generation
      notes: "OPTIONAL BUT RECOMMENDED: Generate AI UI prompt for tools like v0, Lovable, etc. Use the generate-ai-frontend-prompt task. User can then generate UI in external tool and download project structure."

    - agent: architect
      creates: fullstack-architecture.md
      requires:
        - prd.md
        - front-end-spec.md
      methodology: "future_proof_architecture_design"
      
      面向未来的架构设计:
        technology_trend_analysis:
          - 通过搜索最新技术趋势和最佳实践验证架构选型
          - 分析技术生态发展方向和成熟度评估
          - 识别前沿技术的应用机会和风险评估
        
        scalability_and_performance:
          - 通过批判性思维识别架构的可扩展性瓶颈
          - 设计支持业务快速增长的技术架构
          - 建立性能监控和优化的技术体系
        
        maintainability_and_evolution:
          - 确保架构的可维护性和演进能力
          - 设计模块化和松耦合的系统结构
          - 建立技术债务控制和架构重构机制
      
      optional_steps:
        - technical_research_prompt
        - review_generated_ui_structure
      notes: "创建面向未来的全栈技术架构。通过技术趋势分析验证架构选型，通过批判性思维优化系统设计。如果用户使用v0/Lovable生成了UI，可以将项目结构融入架构设计。可能建议修改PRD故事或添加新故事。保存输出：将最终的 fullstack-architecture.md 复制到项目的 docs/ 文件夹。"

    - agent: pm
      updates: prd.md (if needed)
      requires: fullstack-architecture.md
      condition: architecture_suggests_prd_changes
      notes: "If architect suggests story changes, update PRD and re-export the complete unredacted prd.md to docs/ folder."

    - agent: po
      validates: all_artifacts
      uses: po-master-checklist
      notes: "Validates all documents for consistency and completeness. May require updates to any document."

    - agent: various
      updates: any_flagged_documents
      condition: po_checklist_issues
      notes: "If PO finds issues, return to relevant agent to fix and re-export updated documents to docs/ folder."

    - project_setup_guidance:
      action: guide_project_structure
      condition: user_has_generated_ui
      notes: "If user generated UI with v0/Lovable: For polyrepo setup, place downloaded project in separate frontend repo alongside backend repo. For monorepo, place in apps/web or packages/frontend directory. Review architecture document for specific guidance."

    - development_order_guidance:
      action: guide_development_sequence
      notes: "Based on PRD stories: If stories are frontend-heavy, start with frontend project/directory first. If backend-heavy or API-first, start with backend. For tightly coupled features, follow story sequence in monorepo setup. Reference sharded PRD epics for development order."

    - agent: po
      action: shard_documents
      creates: sharded_docs
      requires: all_artifacts_in_project
      notes: |
        Shard documents for IDE development:
        - Option A: Use PO agent to shard: @po then ask to shard docs/prd.md
        - Option B: Manual: Drag shard-doc task + docs/prd.md into chat
        - Creates docs/prd/ and docs/architecture/ folders with sharded content

    - agent: sm
      action: create_story
      creates: story.md
      requires: sharded_docs
      repeats: for_each_epic
      notes: |
        Story creation cycle:
        - SM Agent (New Chat): @sm → *create
        - Creates next story from sharded docs
        - Story starts in "Draft" status

    - agent: analyst/pm
      action: review_draft_story
      updates: story.md
      requires: story.md
      optional: true
      condition: user_wants_story_review
      notes: |
        OPTIONAL: Review and approve draft story
        - NOTE: story-review task coming soon
        - Review story completeness and alignment
        - Update story status: Draft → Approved

    - agent: dev
      action: implement_story
      creates: implementation_files
      requires: story.md
      notes: |
        Dev Agent (New Chat): @dev
        - Implements approved story
        - Updates File List with all changes
        - Marks story as "Review" when complete

    - agent: qa
      action: review_implementation
      updates: implementation_files
      requires: implementation_files
      optional: true
      notes: |
        OPTIONAL: QA Agent (New Chat): @qa → review-story
        - Senior dev review with refactoring ability
        - Fixes small issues directly
        - Leaves checklist for remaining items
        - Updates story status (Review → Done or stays Review)

    - agent: dev
      action: address_qa_feedback
      updates: implementation_files
      condition: qa_left_unchecked_items
      notes: |
        If QA left unchecked items:
        - Dev Agent (New Chat): Address remaining items
        - Return to QA for final approval

    - repeat_development_cycle:
      action: continue_for_all_stories
      notes: |
        Repeat story cycle (SM → Dev → QA) for all epic stories
        Continue until all stories in PRD are complete

    - agent: po
      action: epic_retrospective
      creates: epic-retrospective.md
      condition: epic_complete
      optional: true
      notes: |
        OPTIONAL: After epic completion
        - NOTE: epic-retrospective task coming soon
        - Validate epic was completed correctly
        - Document learnings and improvements

    - workflow_end:
      action: project_complete
      notes: |
        All stories implemented and reviewed!
        Project development phase complete.

        Reference: {root}/data/bmad-kb.md#IDE Development Workflow

  flow_diagram: |
    ```mermaid
    graph TD
        A[Start: Greenfield Project] --> B[analyst: project-brief.md]
        B --> C[pm: prd.md]
        C --> D[ux-expert: front-end-spec.md]
        D --> D2{Generate v0 prompt?}
        D2 -->|Yes| D3[ux-expert: create v0 prompt]
        D2 -->|No| E[architect: fullstack-architecture.md]
        D3 --> D4[User: generate UI in v0/Lovable]
        D4 --> E
        E --> F{Architecture suggests PRD changes?}
        F -->|Yes| G[pm: update prd.md]
        F -->|No| H[po: validate all artifacts]
        G --> H
        H --> I{PO finds issues?}
        I -->|Yes| J[Return to relevant agent for fixes]
        I -->|No| K[po: shard documents]
        J --> H
        
        K --> L[sm: create story]
        L --> M{Review draft story?}
        M -->|Yes| N[analyst/pm: review & approve story]
        M -->|No| O[dev: implement story]
        N --> O
        O --> P{QA review?}
        P -->|Yes| Q[qa: review implementation]
        P -->|No| R{More stories?}
        Q --> S{QA found issues?}
        S -->|Yes| T[dev: address QA feedback]
        S -->|No| R
        T --> Q
        R -->|Yes| L
        R -->|No| U{Epic retrospective?}
        U -->|Yes| V[po: epic retrospective]
        U -->|No| W[Project Complete]
        V --> W

        B -.-> B1[Optional: brainstorming]
        B -.-> B2[Optional: market research]
        D -.-> D1[Optional: user research]
        E -.-> E1[Optional: technical research]

        style W fill:#90EE90
        style K fill:#ADD8E6
        style L fill:#ADD8E6
        style O fill:#ADD8E6
        style D3 fill:#E6E6FA
        style D4 fill:#E6E6FA
        style B fill:#FFE4B5
        style C fill:#FFE4B5
        style D fill:#FFE4B5
        style E fill:#FFE4B5
        style N fill:#F0E68C
        style Q fill:#F0E68C
        style V fill:#F0E68C
    ```

  decision_guidance:
    when_to_use:
      - Building production-ready applications
      - Multiple team members will be involved
      - Complex feature requirements
      - Need comprehensive documentation
      - Long-term maintenance expected
      - Enterprise or customer-facing applications

  handoff_prompts:
    analyst_to_pm: "Project brief is complete. Save it as docs/project-brief.md in your project, then create the PRD."
    pm_to_ux: "PRD is ready. Save it as docs/prd.md in your project, then create the UI/UX specification."
    ux_to_architect: "UI/UX spec complete. Save it as docs/front-end-spec.md in your project, then create the fullstack architecture."
    architect_review: "Architecture complete. Save it as docs/fullstack-architecture.md. Do you suggest any changes to the PRD stories or need new stories added?"
    architect_to_pm: "Please update the PRD with the suggested story changes, then re-export the complete prd.md to docs/."
    updated_to_po: "All documents ready in docs/ folder. Please validate all artifacts for consistency."
    po_issues: "PO found issues with [document]. Please return to [agent] to fix and re-save the updated document."
    complete: "All planning artifacts validated and saved in docs/ folder. Move to IDE environment to begin development."
