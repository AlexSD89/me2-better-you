# <!-- Powered by BMAD™ Core -->
workflow:
  id: enterprise-complex-solution
  name: Enterprise-Level Complex Solution Development / 企业级别复杂方案开发工作流
  description: >-
    Enterprise-grade workflow for complex solution development with high complexity, 
    high value, and multiple stakeholders. Implements the proven "问题识别 → 解决方案 → 生成 → 逻辑验证" 
    pattern with 4-round optimization cycles. Delivers high-quality, high-density, 
    multi-layered documentation that exceeds MRD standards.
    
    企业级复杂方案的智能协作开发工作流。专门处理高复杂度、高价值、多利益相关者的企业级解决方案设计和实施。
    通过多轮深度分析，让解决方案在搜索验证和批判性思维中自然演进和完善，确保方案的商业价值和技术可行性。
    
    **Core Philosophy / 核心理念**: Dynamic nested loop thinking growth model / 动态循环嵌套的思维成长模式。
    Each analysis round contains countless micro-loops: problem identification → search validation → 
    critical analysis → solution optimization → re-validation → deeper refinement.
    每个分析轮次内部包含无数个小循环：问题识别→搜索验证→批判分析→方案优化→再验证→再深化。
    This nested loop pattern enables continuous micro-level validation and macro-level systematic upgrades.
    这种循环嵌套模式让思维在微观层面持续验证，在宏观层面系统升级。
  type: enterprise-fullstack
  methodology: "universal_enterprise_complex_solution"
  
  # High-Quality Documentation Requirements (基于ZHILINK4质量标准)
  documentation_standards:
    information_density: "ultra_high"  # 超高信息密度 (每主要章节≥500-800字)
    output_volume: "comprehensive"     # 综合性输出 (≥5个主要文档)
    quality_tier: "enterprise_plus"   # 企业级+质量标准 (超越MRD标准)
    documentation_count: "minimum_5_major_documents"  # 至少5个主要文档
    layered_depth: "4_layer_analysis"  # 4层深度分析 (Layer 0-3)
    
    # ZHILINK4验证的核心方法论特征
    zhilink4_methodology_essence:
      iterative_thinking_growth: "通过多轮思考让内容自然生长和完善"
      logical_depth_progression: "从表面问题深入到根本逻辑的递进分析"
      context_driven_expansion: "基于对话和上下文不断丰富和完善方案"
      evidence_based_refinement: "通过外部研究和验证持续优化判断"
      stakeholder_driven_completeness: "围绕利益相关者需求逐步完善解决方案"
      practical_implementation_focus: "始终聚焦在可实际执行的具体方案"
      
    # 动态循环嵌套的思维成长模式
    dynamic_nested_thinking:
      micro_loops: "任何想法→即时搜索→验证→更新→确认→细化"
      macro_loops: "四轮系统性深化，每轮包含无数微循环"
      parallel_processing: "多agent并行搜索，实时信息整合"
      adaptive_refinement: "基于新发现动态调整方向和重点"
      organic_growth: "让文档内容在循环中自然生长和完善"
      
    # 实时协作模式
    real_time_collaboration:
      trigger_sensitive: "任何信息都可能触发新的搜索和验证"
      search_intensive: "大量并行搜索获取最新最全信息"
      update_continuous: "文档持续更新，永远基于最新理解"
      confirmation_frequent: "高频确认确保方向正确"
      iteration_rapid: "快速迭代，避免陷入过度规划"
  project_types:
    - enterprise-applications
    - government-partnerships
    - ai-platforms
    - certification-systems
    - security-frameworks
    - compliance-solutions
    - full-stack-platforms
    - multi-agent-systems

  # Core Methodology: Problem → Solution → Generation → Logic Validation
  sequence:
    # Phase 1: Deep Problem Analysis & Multi-Layer Requirements
    - agent: analyst
      phase: "Deep Problem Analysis & Multi-Layer Requirements"
      创建文档 / creates: 
        - layer-0-value-analysis.md        # 价值层分析 / Value Layer Analysis
        - stakeholder-ecosystem-map.md     # 利益相关者生态图 / Stakeholder Ecosystem Map
        - problem-decomposition-matrix.md  # 问题分解矩阵 / Problem Decomposition Matrix
        - requirements-traceability.md     # 需求可追溯性 / Requirements Traceability
      methodology: "comprehensive_stakeholder_requirement_analysis"
      中文方法论: "深度需求理解与利益相关者分析"
      
      思维成长重点 / Thinking Growth Focus:
        stakeholder_ecosystem_mapping / 利益相关者生态映射:
          - 识别和分析所有关键利益相关者的需求和约束
            Identify and analyze all key stakeholder requirements and constraints
          - 理解复杂的组织政治和决策影响因素
            Understand complex organizational politics and decision-making factors
          - 构建利益相关者生态图和影响力矩阵
            Build stakeholder ecosystem maps and influence matrices
        
        requirement_depth_excavation / 需求深度挖掘:
          - 从表面需求挖掘到根本业务驱动和价值创造
            Excavate from surface requirements to fundamental business drivers and value creation
          - 识别隐性需求和未来业务发展方向
            Identify implicit requirements and future business development directions
          - 建立需求的优先级和实现路径
            Establish requirement priorities and implementation pathways
        
        constraint_and_opportunity / 约束与机会:
          - 全面分析技术、商业、法规等约束条件
            Comprehensively analyze technical, commercial, and regulatory constraints
          - 识别约束中隐藏的创新机会和突破点
            Identify hidden innovation opportunities and breakthrough points within constraints
          - 设计在约束条件下的最优解决方案
            Design optimal solutions under constraint conditions
      
      documentation_requirements:
        iterative_depth: "每轮分析都要比前一轮更深入、更完整 / Each analysis round must be deeper and more complete than the previous"
        logical_progression: "从Why→What→How的逻辑递进 / Logical progression from Why→What→How"
        stakeholder_ecosystem: "完整的利益相关者生态分析 / Complete stakeholder ecosystem analysis"
        context_awareness: "充分理解和响应项目特定上下文 / Fully understand and respond to project-specific context"
        evidence_integration: "将外部研究有机整合到分析中 / Organically integrate external research into analysis"
        practical_actionability: "确保所有分析都指向可执行的行动 / Ensure all analysis points to executable actions"
      uses:
        - multi-dimensional stakeholder analysis
        - value stream mapping techniques
        - constraint and assumption documentation
        - risk landscape assessment
      strategy: "comprehensive_enterprise_discovery"
      quality_gates:
        - "All major stakeholders interviewed and documented"
        - "Business value quantified with specific metrics"
        - "Constraints and assumptions explicitly documented"
        - "Risk factors identified and prioritized"
      notes: "Enterprise Phase 1: Comprehensive multi-layer analysis producing high-density documentation. Each document must meet enterprise+ quality standards with detailed analysis and complete stakeholder coverage."

    # Phase 2: Comprehensive Solution Design - Round 1 (Production)
    - agent: architect
      phase: "Comprehensive Solution Design - Round 1 (Production)"
      创建文档 / creates:
        - layer-1-business-architecture.md    # 商业架构设计 / Business Architecture Design
        - layer-2-solution-architecture.md    # 解决方案架构 / Solution Architecture
        - layer-3-technical-architecture.md   # 技术架构详细设计 / Technical Architecture Detailed Design
        - integration-strategy-matrix.md      # 集成策略矩阵 / Integration Strategy Matrix
        - technology-selection-rationale.md   # 技术选型理论依据 / Technology Selection Rationale
      requires: 
        - layer-0-value-analysis.md
        - stakeholder-ecosystem-map.md
        - problem-decomposition-matrix.md
      methodology: "systematic_solution_architecture_design"
      中文方法论: "系统性解决方案架构设计"
      
      批判性思维优化 / Critical Thinking Optimization:
        gap_analysis_and_improvement / 差距分析与改进:
          - 通过批判性思维识别现有解决方案的根本缺陷
            Identify fundamental flaws in existing solutions through critical thinking
          - 分析解决方案在不同场景下的适用性限制
            Analyze applicability limitations of solutions in different scenarios
          - 设计突破性的创新解决方案和差异化优势
            Design breakthrough innovative solutions and differentiation advantages
        
        risk_assessment_and_mitigation / 风险评估与缓解:
          - 系统性识别技术、商业、运营等各层面风险
            Systematically identify risks at technical, commercial, and operational levels
          - 通过批判性分析评估风险的真实影响程度
            Assess real impact levels of risks through critical analysis
          - 设计多层次的风险缓解和应急响应机制
            Design multi-level risk mitigation and emergency response mechanisms
        
        scalability_and_evolution / 可扩展性与演进:
          - 批判性评估解决方案的可扩展性和演进能力
            Critically assess solution scalability and evolution capabilities
          - 识别未来可能的技术债务和架构瓶颈
            Identify potential future technical debt and architectural bottlenecks
          - 设计支持业务快速增长的技术架构
            Design technical architecture supporting rapid business growth
      
      documentation_requirements:
        solution_coherence: "所有设计决策形成一致的整体解决方案 / All design decisions form a coherent overall solution"
        progressive_refinement: "从概念设计到具体实现的渐进式完善 / Progressive refinement from concept to implementation"
        decision_transparency: "每个重要决策都有清晰的reasoning过程 / Clear reasoning process for every important decision"
        integration_wholeness: "系统各部分之间的有机整合 / Organic integration between system components"
        feasibility_grounding: "所有设计都基于现实可行性 / All designs based on realistic feasibility"
        evolution_readiness: "考虑未来发展和扩展的架构设计 / Architecture design considering future development and expansion"
      uses:
        - enterprise architecture frameworks
        - industry best practices analysis
        - technical risk assessment matrices
        - scalability and performance modeling
      strategy: "comprehensive_technical_foundation"
      optimization_round: 1
      quality_gates:
        - "All architectural decisions have documented rationale"
        - "Integration points clearly defined and documented"
        - "Technology selections validated against requirements"
        - "Performance and scalability factors addressed"
      notes: "Enterprise Round 1: Comprehensive solution design producing detailed multi-layer architecture documentation. Each document must contain extensive technical analysis with complete decision rationale."

    # Phase 3: Research Validation - Round 2 (Search)
    - agent: search-specialist
      phase: "Research Validation - Round 2 (Search)"
      创建文档 / creates: research-validation-r2.md
      requires: architecture-r1.md
      methodology: "multi_dimensional_market_intelligence_analysis"
      中文方法论: "多维度市场情报收集与竞争分析"
      uses:
        - WebSearch (enterprise architecture patterns)
        - Tavily Search (industry best practices)
        - GitHub Search (reference implementations)
        - Jina Reader (technical documentation analysis)
      strategy: "external_validation_enhancement"
      optimization_round: 2
      
      外部信息验证与丰富 / External Information Validation & Enrichment:
        competitive_landscape_deep_dive / 竞争格局深度分析:
          - 通过搜索和外部信息全面分析竞争对手解决方案
            Comprehensively analyze competitor solutions through search and external information
          - 识别市场最佳实践和创新案例
            Identify market best practices and innovation cases
          - 收集客户反馈和市场接受度数据
            Collect customer feedback and market acceptance data
        
        technology_trend_validation / 技术趋势验证:
          - 验证技术选型的市场趋势和成熟度
            Validate market trends and maturity of technology choices
          - 搜索相关技术的成功案例和失败教训
            Search for success cases and failure lessons of related technologies
          - 分析技术发展路线图和未来发展方向
            Analyze technology roadmaps and future development directions
        
        regulatory_compliance_research / 法规合规研究:
          - 搜索和验证相关行业法规和合规要求
            Search and validate relevant industry regulations and compliance requirements
          - 收集合规最佳实践和风险案例
            Collect compliance best practices and risk cases
          - 分析监管趋势对解决方案的影响
            Analyze regulatory trend impacts on solutions
      
      enhancement_focus:
        - industry_best_practices: "Validate against enterprise standards / 根据企业标准验证"
        - technology_compatibility: "Verify technology stack decisions / 验证技术栈决策"
        - security_frameworks: "Research security and compliance patterns / 研究安全和合规模式"
        - government_standards: "Government partnership compliance research / 政府合作合规研究"
      notes: "ZHILINK4 Round 2: Research validation and enhancement with external intelligence. Validate solution against industry best practices, government standards, and enterprise requirements. Enhance architecture with research findings."

    # Phase 4: Critical Analysis - Round 3 (Critical)
    - agent: qa
      phase: "Critical Analysis - Round 3 (Critical)"
      creates: quality-analysis-r3.md
      requires: 
        - architecture-r1.md
        - research-validation-r2.md
      methodology: "comprehensive_critical_quality_assessment"
      中文方法论: "综合性批判质量评估"
      uses:
        - quality-analysis frameworks
        - security-assessment tools
        - compliance-validation criteria
      strategy: "comprehensive_quality_assessment"
      optimization_round: 3
      
      通过批判性思维识别不足和优化点 / Critical Thinking for Gap Identification & Optimization:
        technical_excellence_validation / 技术卓越性验证:
          - 通过批判性思维评估架构质量和最佳实践遵循度
            Assess architecture quality and best practices adherence through critical thinking
          - 识别技术方案中的潜在缺陷和改进机会
            Identify potential flaws and improvement opportunities in technical solutions
          - 验证技术选型的长期可维护性和扩展性
            Validate long-term maintainability and scalability of technology choices
        
        security_compliance_critical_review / 安全合规批判性审查:
          - 批判性分析安全框架的完整性和有效性
            Critically analyze security framework completeness and effectiveness
          - 识别合规要求中的潜在盲区和风险点
            Identify potential blind spots and risk points in compliance requirements
          - 评估政府合作准备度的真实可行性
            Assess realistic feasibility of government partnership readiness
        
        scalability_performance_critique / 可扩展性性能批判:
          - 批判性评估性能和可扩展性设计的现实性
            Critically evaluate realism of performance and scalability design
          - 识别系统在高负载下的潜在瓶颈和故障点
            Identify potential bottlenecks and failure points under high load
          - 分析资源配置和成本控制的可持续性
            Analyze sustainability of resource allocation and cost control
      
      analysis_dimensions:
        - technical_quality: "Architecture quality and best practices adherence / 架构质量和最佳实践遵循"
        - security_compliance: "Security framework and compliance validation / 安全框架和合规验证"
        - scalability_assessment: "Performance and scalability analysis / 性能和可扩展性分析"
        - government_readiness: "Government partnership readiness assessment / 政府合作准备度评估"
        - risk_evaluation: "Risk assessment and mitigation strategies / 风险评估和缓解策略"
      notes: "ZHILINK4 Round 3: Critical analysis and optimization recommendations. Comprehensive quality assessment including security, scalability, compliance, and government partnership readiness. Identify optimization opportunities and provide specific enhancement recommendations."

    # Phase 5: Solution Optimization - Round 4 (Update)
    - agent: architect
      phase: "Solution Optimization - Round 4 (Update)"
      创建文档 / creates: final-architecture.md
      requires:
        - architecture-r1.md
        - research-validation-r2.md
        - quality-analysis-r3.md
      methodology: "strategic_implementation_planning"
      中文方法论: "实施策略制定与执行规划"
      uses:
        - optimization recommendations from R3
        - research enhancements from R2
        - architecture-tmpl.yaml (final version)
      strategy: "integrated_optimization"
      optimization_round: 4
      
      动态嵌套循环的实施优化 / Dynamic Nested Loop Implementation Optimization:
        phased_delivery_optimization / 分阶段交付优化:
          - 设计渐进式交付策略，每个阶段包含验证循环
            Design progressive delivery strategy with validation loops in each phase
          - 建立里程碑验证点和快速反馈机制
            Establish milestone validation points and rapid feedback mechanisms
          - 在实施过程中持续优化和调整策略
            Continuously optimize and adjust strategies during implementation
        
        resource_allocation_intelligence / 智能资源配置:
          - 智能分析资源需求和约束条件
            Intelligently analyze resource requirements and constraints
          - 优化人力、技术、时间等资源的配置
            Optimize allocation of human, technical, and time resources
          - 建立资源动态调整和风险应对机制
            Establish dynamic resource adjustment and risk response mechanisms
        
        success_metrics_and_monitoring / 成功指标与监控:
          - 定义清晰的成功标准和关键性能指标
            Define clear success criteria and key performance indicators
          - 建立实时监控和早期预警系统
            Establish real-time monitoring and early warning systems
          - 设计持续改进和迭代优化流程
            Design continuous improvement and iterative optimization processes
      
      integration_approach:
        - research_integration: "Incorporate validated best practices from Round 2 / 整合第2轮验证的最佳实践"
        - quality_improvements: "Apply optimization recommendations from Round 3 / 应用第3轮的优化建议"
        - compliance_alignment: "Ensure government partnership compliance / 确保政府合作合规性"
        - security_hardening: "Implement security framework enhancements / 实施安全框架增强"
      notes: "ZHILINK4 Round 4: Integrate improvements and finalize solution. Apply research findings, quality improvements, and optimization recommendations. Ensure solution is ready for implementation with government partnership capabilities."

    # Phase 6: UX Design (Government Partnership Focus)
    - agent: ux-expert
      phase: "Enterprise UX Design - Government Partnership Ready"
      creates: ux-specification.md
      requires: final-architecture.md
      methodology: "government_partnership_ux_design"
      中文方法论: "政府合作导向的用户体验设计"
      uses:
        - front-end-spec-tmpl.yaml
        - accessibility standards
        - government design guidelines
      strategy: "compliance_focused_design"
      
      政府合作导向的UX设计 / Government Partnership-Oriented UX Design:
        compliance_driven_design / 合规驱动设计:
          - 基于政府标准和合规要求设计用户界面
            Design user interfaces based on government standards and compliance requirements
          - 确保WCAG 2.1 AA级别无障碍访问合规性
            Ensure WCAG 2.1 AA level accessibility compliance
          - 集成政府多语言和文化适应性要求
            Integrate government multilingual and cultural adaptation requirements
        
        security_first_interaction / 安全优先交互:
          - 设计安全优先的用户界面和交互流程
            Design security-first user interfaces and interaction flows
          - 建立企业级响应式设计和设备兼容性
            Establish enterprise-grade responsive design and device compatibility
          - 实现政府和大型企业部署就绪的用户体验
            Achieve user experience ready for government and large enterprise deployment
        
        stakeholder_experience_optimization / 利益相关者体验优化:
          - 优化政府用户、企业用户、分销商的差异化体验
            Optimize differentiated experiences for government users, enterprise users, and distributors
          - 设计角色权限管理的直观界面体验
            Design intuitive interface experiences for role-based permission management
          - 建立跨平台一致性和品牌识别体系
            Establish cross-platform consistency and brand recognition system
      
      design_principles:
        - accessibility_compliance: "WCAG 2.1 AA compliance for government requirements / 政府要求的WCAG 2.1 AA合规"
        - security_first_design: "Security-first user interface design / 安全优先的用户界面设计"
        - multi_language_support: "Government multilingual requirements / 政府多语言要求"
        - responsive_enterprise: "Enterprise-grade responsive design / 企业级响应式设计"
      notes: "Government partnership focused UX design. Ensure accessibility compliance, security-first design principles, and enterprise-grade user experience suitable for government and large enterprise deployment."

    # Phase 7: Implementation Planning (6AI Coordination)
    - agent: pm
      phase: "Implementation Planning - 6AI Coordination"
      creates: implementation-plan.md
      requires:
        - final-architecture.md
        - ux-specification.md
      methodology: "6ai_coordination_planning"
      中文方法论: "6AI协调规划"
      uses:
        - prd-tmpl.yaml
        - 6AI collaboration framework
      strategy: "structured_multi_agent_planning"
      
      6AI协调规划 / 6AI Coordination Planning:
        multi_agent_orchestration / 多智能体编排:
          - 建立Alex、Sarah、Mike、Emma、David、Catherine的角色定义
            Establish role definitions for Alex, Sarah, Mike, Emma, David, Catherine
          - 在6AI团队结构中分配任务和责任边界
            Distribute tasks and responsibility boundaries across 6AI team structure
          - 设计智能体间通信协议和协作机制
            Design inter-agent communication protocols and collaboration mechanisms
        
        decision_framework_design / 决策框架设计:
          - 建立共识驱动的决策制定流程
            Establish consensus-driven decision making processes
          - 设计冲突解决和优先级仲裁机制
            Design conflict resolution and priority arbitration mechanisms
          - 实现多智能体协作的质量保证体系
            Implement quality assurance system for multi-agent collaboration
        
        implementation_roadmap_creation / 实施路线图创建:
          - 制定基于6AI协作的详细实施计划
            Develop detailed implementation plan based on 6AI collaboration
          - 建立里程碑验证和进度跟踪机制
            Establish milestone validation and progress tracking mechanisms
          - 设计风险管理和应急响应策略
            Design risk management and emergency response strategies
      
      coordination_approach:
        - role_definition: "Define Alex, Sarah, Mike, Emma, David, Catherine roles / 定义6AI专家角色"
        - task_distribution: "Distribute tasks across 6AI team structure / 跨6AI团队分配任务"
        - coordination_protocols: "Establish inter-agent communication protocols / 建立智能体间通信协议"
        - decision_frameworks: "Consensus-driven decision making processes / 共识驱动决策流程"
      notes: "Implementation planning using 6AI collaboration mechanism proven in ZHILINK4. Establish structured coordination between multiple AI agents with clear roles, responsibilities, and decision-making frameworks."

    # Phase 8: Story Creation (Document-Driven Development)
    - agent: sm
      phase: "Story Creation - Document-Driven Development"
      creates: epic-stories.md
      requires:
        - implementation-plan.md
        - final-architecture.md
      methodology: "document_driven_development"
      中文方法论: "文档驱动开发"
      uses:
        - story-tmpl.yaml
        - epic decomposition framework
      strategy: "comprehensive_story_mapping"
      
      文档驱动开发 / Document-Driven Development:
        comprehensive_story_mapping / 综合性故事映射:
          - 基于最终架构和实施计划创建详细史诗和故事
            Create detailed epics and stories based on final architecture and implementation plan
          - 聚焦政府合作功能和企业级要求
            Focus on government partnership features and enterprise requirements
          - 建立可追溯的需求到实现的映射关系
            Establish traceable mapping from requirements to implementation
        
        epic_decomposition_strategy / 史诗分解策略:
          - 政府合作史诗：政府协作功能模块
            Government partnership epics: Government collaboration feature modules
          - 企业安全史诗：安全和合规功能特性
            Enterprise security epics: Security and compliance features
          - 核心平台史诗：核心平台功能架构
            Core platform epics: Core platform functionality architecture
          - 6AI集成史诗：多智能体协调功能
            6AI integration epics: Multi-agent coordination features
        
        development_prioritization / 开发优先级排序:
          - 基于政府合作业务价值排序开发优先级
            Prioritize development based on government partnership business value
          - 建立迭代交付和风险控制机制
            Establish iterative delivery and risk control mechanisms
          - 设计用户验收标准和质量验证框架
            Design user acceptance criteria and quality validation framework
      
      story_structure:
        - government_partnership_epics: "Government collaboration features / 政府协作功能"
        - enterprise_security_epics: "Security and compliance features / 安全和合规功能"
        - core_platform_epics: "Core platform functionality / 核心平台功能"
        - 6ai_integration_epics: "Multi-agent coordination features / 多智能体协调功能"
      notes: "Document-driven development approach with comprehensive story mapping. Create detailed epics and stories based on final architecture and implementation plan. Focus on government partnership features and enterprise requirements."

    # Quality Gate: Enterprise Readiness Validation
    - quality_gate: enterprise_readiness_validation
      agent: qa
      action: comprehensive_enterprise_validation
      creates: enterprise-readiness-report.md
      requires: 
        - final-architecture.md
        - ux-specification.md
        - implementation-plan.md
        - epic-stories.md
      validation_criteria:
        - government_partnership_readiness: "Ready for government collaboration deployment"
        - security_compliance_score: ">= 9.0/10 enterprise security standards"
        - scalability_validation: "Validated for enterprise-scale deployment"
        - 6ai_coordination_readiness: "Multi-agent coordination framework ready"
        - documentation_completeness: "All documentation meets enterprise standards"
      notes: "Critical enterprise readiness validation. Comprehensive assessment of government partnership readiness, security compliance, scalability, and documentation completeness. Must pass all criteria before proceeding to development."

    # Phase 9: Development Coordination (Multi-Agent Implementation)
    - conditional_development_sequence:
      condition: enterprise_readiness_validation_passed
      phases:
        - agent: dev
          phase: "Backend Development - Enterprise Security"
          methodology: "enterprise_backend_development"
          focus: "Security-first backend with government compliance"
          
        - agent: dev
          phase: "Frontend Development - Government UX"
          methodology: "government_frontend_development"
          focus: "Accessible, secure, enterprise-grade frontend"
          
        - agent: qa
          phase: "Continuous Quality Assurance"
          methodology: "enterprise_qa_continuous"
          focus: "Continuous validation against enterprise standards"

  # ZHILINK4 Methodology Configuration
  zhilink4_configuration:
    
    # 3-Round Optimization Framework
    optimization_framework:
      round_1_production:
        focus: "Technical foundation and initial design"
        success_criteria: "Clear architecture with technology decisions"
        output_quality: "Foundation established for enhancement"
        
      round_2_search:
        focus: "External validation and research enhancement"
        success_criteria: "Industry best practices integrated"
        output_quality: "Solution validated against external standards"
        
      round_3_critical:
        focus: "Quality assessment and optimization identification"
        success_criteria: "Comprehensive quality analysis completed"
        output_quality: "Optimization opportunities clearly identified"
        
      round_4_update:
        focus: "Integration of improvements and finalization"
        success_criteria: "Optimized solution ready for implementation"
        output_quality: "Enterprise-ready architecture finalized"

    # Government Partnership Integration
    government_partnership:
      dual_core_flywheel:
        core_1: "Enterprise certification and compliance framework"
        core_2: "Government collaboration and partnership mechanisms"
        integration_approach: "Seamless dual-core operation with shared standards"
        
      compliance_framework:
        security_standards: "Government-grade security requirements"
        accessibility_standards: "WCAG 2.1 AA/AAA compliance"
        data_protection: "Government data protection and privacy standards"
        audit_requirements: "Full audit trail and compliance reporting"

    # 6AI Collaboration Mechanism
    multi_agent_coordination:
      agent_roles:
        Alex: "Technical architecture and system design leadership"
        Sarah: "User experience and interface design coordination"
        Mike: "Backend development and security implementation"
        Emma: "Frontend development and accessibility compliance"
        David: "Quality assurance and testing coordination"
        Catherine: "Project management and stakeholder coordination"
        
      coordination_protocols:
        decision_making: "Consensus-driven with technical veto authority"
        communication: "Structured handoffs with documentation requirements"
        quality_gates: "Multi-agent validation at key milestones"
        conflict_resolution: "Escalation to human oversight when needed"

  # Technology Stack (Proven from ZHILINK4)
  technology_framework:
    unified_approach: "TypeScript-centric full-stack development"
    
    frontend:
      primary: "Next.js 15 with React 19"
      styling: "Tailwind CSS with enterprise design system"
      state_management: "React state with enterprise patterns"
      testing: "Jest + Playwright for comprehensive testing"
      
    backend:
      primary: "Node.js with TypeScript"
      database: "PostgreSQL with Redis caching"
      api_design: "RESTful APIs with OpenAPI documentation"
      authentication: "Enterprise SSO and OAuth2 integration"
      
    infrastructure:
      deployment: "Docker containerization with Kubernetes"
      monitoring: "Enterprise monitoring and logging"
      security: "Zero-trust security architecture"
      compliance: "Government compliance automation"

  # Success Metrics (Based on ZHILINK4 Results)
  success_metrics:
    methodology_effectiveness:
      - optimization_cycles_completed: "All 4 rounds successfully executed"
      - research_validation_score: ">= 8.5/10 external validation"
      - quality_improvement_ratio: ">= 30% improvement from R1 to R4"
      - government_readiness_score: ">= 9.0/10 partnership readiness"
      
    technical_excellence:
      - architecture_quality_score: ">= 9.0/10 enterprise standards"
      - security_compliance_score: ">= 9.5/10 government standards"
      - performance_benchmarks: "Enterprise-scale performance validated"
      - documentation_completeness: "100% enterprise documentation coverage"
      
    business_value:
      - government_partnership_readiness: "Ready for government deployment"
      - enterprise_certification: "Enterprise certification requirements met"
      - scalability_validation: "Validated for large-scale deployment"
      - compliance_automation: "Automated compliance reporting implemented"
      
    # ZHILINK4核心成功模式验证
    zhilink4_success_pattern_validation:
      - iterative_improvement_demonstrated: "每轮迭代都有明显的思维深化和内容丰富"
      - logical_coherence_achieved: "从问题识别到解决方案的逻辑一致性"
      - context_integration_complete: "上下文信息充分整合到最终解决方案"
      - stakeholder_value_maximized: "各利益相关者价值得到平衡和最大化"
      - implementation_path_clear: "从当前状态到目标状态的清晰路径"
      - adaptive_learning_embedded: "解决方案具备持续学习和适应能力"

  flow_diagram: |
    ```mermaid
    graph TD
        A[Problem Identification] --> B[Round 1: Production - Initial Architecture]
        B --> C[Round 2: Search - Research Validation]
        C --> D[Round 3: Critical - Quality Analysis]
        D --> E[Round 4: Update - Final Architecture]
        
        E --> F[Enterprise UX Design]
        F --> G[6AI Implementation Planning]
        G --> H[Document-Driven Story Creation]
        H --> I{Enterprise Readiness Gate}
        
        I -->|Passed| J[Multi-Agent Development]
        I -->|Failed| K[Return to Previous Phase]
        J --> L[Government Partnership Ready]
        
        C -.-> C1[WebSearch + Tavily + GitHub + Jina]
        D -.-> D1[Comprehensive Quality Analysis]
        G -.-> G1[6AI: Alex, Sarah, Mike, Emma, David, Catherine]
        
        style A fill:#FF6B6B
        style E fill:#4ECDC4
        style I fill:#45B7D1
        style L fill:#96CEB4
        style G1 fill:#FECA57
    ```

  decision_guidance:
    when_to_use:
      - Enterprise-scale application development
      - Government partnership initiatives
      - Multi-agent AI system coordination
      - Security and compliance critical projects
      - Large-scale full-stack platform development
      - Projects requiring comprehensive documentation
      - Systems needing government certification readiness

    complexity_indicators:
      enterprise: "Government partnership requirements, multi-agent coordination needed"
      high: "Enterprise security, compliance automation, large-scale deployment"
      complex: "Multiple stakeholder coordination, comprehensive documentation"
      expert: "All ZHILINK4 methodology benefits required"

  handoff_prompts:
    problem_to_production: "Problem analysis complete with stakeholder requirements. Beginning Round 1 production architecture design. / 问题分析完成，利益相关者需求明确。开始第1轮生产级架构设计。"
    production_to_search: "Initial architecture established. Beginning Round 2 research validation and enhancement. / 初始架构建立。开始第2轮研究验证和增强。"
    search_to_critical: "Research validation complete with industry best practices integrated. Beginning Round 3 critical analysis. / 研究验证完成，已整合行业最佳实践。开始第3轮批判性分析。"
    critical_to_update: "Quality analysis complete with optimization recommendations. Beginning Round 4 final architecture integration. / 质量分析完成，优化建议就绪。开始第4轮最终架构整合。"
    architecture_to_ux: "Final architecture ready. Beginning government partnership focused UX design. / 最终架构就绪。开始政府合作导向的UX设计。"
    ux_to_planning: "UX specification complete. Beginning 6AI coordination implementation planning. / UX规格完成。开始6AI协调实施规划。"
    planning_to_stories: "Implementation plan ready. Beginning document-driven story creation. / 实施计划就绪。开始文档驱动的故事创建。"
    stories_to_gate: "Epic stories created. Beginning enterprise readiness validation. / 史诗故事已创建。开始企业就绪度验证。"
    gate_to_development: "Enterprise readiness validated. Beginning multi-agent development coordination. / 企业就绪度验证通过。开始多智能体开发协调。"
    development_complete: "Enterprise-level complex solution methodology complete. Government partnership ready system delivered. All artifacts exported to docs/ folder. Move to IDE environment to begin development. / 企业级复杂方案方法论完成。政府合作就绪系统交付。所有制品已导出到docs/文件夹。进入IDE环境开始开发。"
  
  success_metrics:
    methodology_effectiveness / 方法论有效性:
      - optimization_cycles_completed: "All 4 rounds successfully executed / 4轮优化成功执行"
      - research_validation_score: ">= 8.5/10 external validation / 外部验证得分≥8.5/10"
      - quality_improvement_ratio: ">= 30% improvement from R1 to R4 / 从R1到R4改进≥30%"
      - government_readiness_score: ">= 9.0/10 partnership readiness / 政府合作就绪度≥9.0/10"
      
    technical_excellence / 技术卓越性:
      - architecture_quality_score: ">= 9.0/10 enterprise standards / 企业标准架构质量≥9.0/10"
      - security_compliance_score: ">= 9.5/10 government standards / 政府标准安全合规≥9.5/10"
      - performance_benchmarks: "Enterprise-scale performance validated / 企业级性能验证通过"
      - documentation_completeness: "100% enterprise documentation coverage / 100%企业文档覆盖"
      
    business_value / 商业价值:
      - government_partnership_readiness: "Ready for government deployment / 政府部署就绪"
      - enterprise_certification: "Enterprise certification requirements met / 企业认证要求满足"
      - scalability_validation: "Validated for large-scale deployment / 大规模部署验证通过"
      - compliance_automation: "Automated compliance reporting implemented / 自动化合规报告实现"