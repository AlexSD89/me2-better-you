# <!-- Powered by BMAD™ Core -->
# BMAD Core Configuration - Claude Code Integration
markdownExploder: true
slashPrefix: BMad

# Local Path Configuration (Project-Relative)
paths:
  bmad_core: .claude/bmad-core
  agents: .claude/agents
  commands: .claude/commands
  templates: .claude/bmad-core/templates
  checklists: .claude/bmad-core/checklists
  data: .claude/bmad-core/data
  workflows: .claude/bmad-core/workflows
  agent_teams: .claude/bmad-core/agent-teams

# Claude Code Integration
claude_code:
  subagent_source: .claude/agents
  command_source: .claude/commands
  mcp_integration: enabled
  hook_system: enabled

# Quality Assurance Configuration
qa:
  qaLocation: docs/qa
  qaTemplates: .claude/bmad-core/templates/qa-gate-tmpl.yaml
  checklists: .claude/bmad-core/checklists

# Product Requirements Document (PRD) Configuration
prd:
  prdFile: docs/prd.md
  prdVersion: v4
  prdSharded: true
  prdShardedLocation: docs/prd
  epicFilePattern: epic-{n}*.md
  templates: .claude/bmad-core/templates/prd-tmpl.yaml

# Architecture Configuration
architecture:
  architectureFile: docs/architecture.md
  architectureVersion: v4
  architectureSharded: true
  architectureShardedLocation: docs/architecture
  templates: .claude/bmad-core/templates/architecture-tmpl.yaml

# Development Configuration
development:
  devLoadAlwaysFiles:
    - docs/architecture/coding-standards.md
    - docs/architecture/tech-stack.md
    - docs/architecture/source-tree.md
  devDebugLog: .ai/debug-log.md
  devStoryLocation: docs/stories
  storyTemplates: .claude/bmad-core/templates/story-tmpl.yaml

# Custom Technical Documents
customTechnicalDocuments: null

# Agent Team Configuration
agent_teams:
  enabled: true
  config_location: .claude/bmad-core/agent-teams
  default_team: team-all
  available_teams:
    - team-all
    - team-fullstack  
    - team-research
    - team-ide-minimal
    - team-no-ui
    - team-zhilink4-enterprise

# Workflow Configuration
workflows:
  enabled: true
  location: .claude/bmad-core/workflows
  default_workflow: research-intensive
  available_workflows:
    - research-intensive
    - greenfield-fullstack
    - greenfield-service
    - greenfield-ui
    - brownfield-fullstack
    - brownfield-service
    - brownfield-ui
    - enterprise-complex-solution

# Search Enhancement Configuration
search:
  concurrent_enabled: true
  default_concurrency: medium
  mcp_integration:
    - tavily_search
    - jina_reader
    - github_search
    - media_crawler
  quality_threshold: 7.5
  verification_sources: 3

# Template System Configuration
templates:
  location: .claude/bmad-core/templates
  format: yaml
  validation: enabled

# Data and Knowledge Base Configuration
knowledge_base:
  location: .claude/bmad-core/data
  files:
    - bmad-kb.md
    - brainstorming-techniques.md
    - elicitation-methods.md
    - technical-preferences.md
    - test-levels-framework.md
    - test-priorities-matrix.md

# Local Integration Settings
integration:
  with_claude_code: true
  native_subagents: true
  mcp_servers: true
  hook_automation: true
  local_paths_only: true
  external_dependencies: false

# Universal Enterprise Methodology Integration
universal_enterprise_methodology:
  enabled: true
  name: "Universal Enterprise Complex Solution Methodology"
  description: "Universal methodology: problem identification → solution → generation → logic validation"
  
  # Core 4-Round Optimization Pattern
  optimization_cycle:
    round_1_production:
      agent: architect
      purpose: "Initial solution design based on current understanding"
      output_type: "initial_solution_document"
      success_criteria: "Solid foundation with internal consistency"
      
    round_2_validation:
      agent: search-specialist
      purpose: "External validation and enhancement with industry intelligence"
      output_type: "validated_enhanced_solution"
      success_criteria: "Solution validated against external best practices"
      
    round_3_critical:
      agent: qa
      purpose: "Critical analysis and optimization identification"
      output_type: "optimization_analysis"
      success_criteria: "Quality gaps identified, improvements proposed"
      
    round_4_integration:
      agent: architect
      purpose: "Integrate improvements and finalize optimized solution"
      output_type: "final_optimized_solution"
      success_criteria: "Solution ready for implementation with quality assurance"
  
  # Universal Pattern Recognition Framework
  pattern_framework:
    complexity_assessment:
      dimensions: ["stakeholder_complexity", "technical_complexity", "business_complexity", "execution_complexity"]
      thresholds: ["low", "medium", "high", "enterprise"]
      
    dialogue_confirmation:
      phases: ["initial_understanding", "layered_deepening", "iterative_refinement"]
      methods: ["requirement_elicitation", "constraint_identification", "expectation_alignment"]
      
    quality_assurance:
      layers: ["value_layer", "strategy_layer", "execution_layer", "implementation_layer"]
      standards: ["excellent", "good", "acceptable", "needs_improvement"]
      
    external_validation:
      sources: ["industry_best_practices", "academic_research", "market_standards", "regulatory_requirements"]
      methods: ["comparative_analysis", "gap_identification", "enhancement_proposal"]
  
  # Universal Collaboration Framework
  collaboration_patterns:
    role_specialization: true
    decision_mechanisms: ["consensus_driven", "expertise_based", "stakeholder_validated"]
    coordination_protocols: ["structured_handoffs", "quality_gates", "continuous_feedback"]
    
  # Adaptive Configuration
  adaptive_features:
    complexity_based_scaling: true
    domain_specific_customization: true
    organizational_maturity_adjustment: true
    continuous_learning_optimization: true
