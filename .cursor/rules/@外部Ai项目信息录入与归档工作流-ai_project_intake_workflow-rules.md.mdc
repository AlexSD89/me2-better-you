# AI项目录入引擎规则 (v3.0-AI原生版)

> **核心指令：本AI必须严格执行"查重→采集→生成→交付"四步闭环，每一步需返回结构化状态码。禁止跳步，禁止主观推断。**

## 🚨 AI执行信号系统

### 版本标记
```
版本: v3.0-AI原生版
状态: ACTIVE
最后更新: [AI自动生成YYYY-MM-DD]
```

### 执行优先级矩阵
| 优先级 | 触发条件 | AI响应动作 |
|---|---|---|
| P0 | 项目重复录入 | 立即中止→返回错误码DUPLICATE_PROJECT |
| P1 | 数据源不可达 | 标记[INFO_MISSING]→继续执行 |
| P2 | 分类未匹配 | 强制分类决策→写入归档路径 |
| P3 | 模板不对齐 | 自动修复→记录修复日志 |

---

## AI操作指令集

### 指令1: 项目查重扫描 (DUPLICATE_SCAN)
**AI触发条件**: 检测到新项目录入请求
**执行动作**:
```python
# AI伪代码
def duplicate_scan(project_name, company_name):
    search_patterns = [
        f"项目名称: {project_name}",
        f"公司名称: {company_name}",
        f"{project_name}-",
        f"{company_name}-"
    ]
    
    existing_projects = []
    for pattern in search_patterns:
        matches = search_knowledge_base(pattern)
        existing_projects.extend(matches)
    
    if existing_projects:
        return {"status": "DUPLICATE_PROJECT", "existing": existing_projects}
    return {"status": "NEW_PROJECT_OK"}
```

**AI输出格式**:
```json
{
  "status": "NEW_PROJECT_OK|DUPLICATE_PROJECT",
  "timestamp": "2025-07-21",
  "existing_projects": [...],
  "action_required": "CONFIRM_WITH_USER"
}
```

### 指令2: 数据主动采集 (DATA_HARVEST)
**AI触发条件**: 确认新项目录入
**采集层级**:
1. **一级信源** (权重1.0): 官网/创始人/官方公告
2. **二级信源** (权重0.8): 权威媒体/VC公告  
3. **三级信源** (权重0.6): 行业报告/深度评测
4. **四级信源** (权重0.3): 社交媒体/论坛/员工评价

**AI采集动作**:
```
对每个数据维度执行：
→ 提取关键词矩阵
→ 多轮递进式检索
→ 交叉验证数据一致性
→ 计算可信度分数
→ 标记[高/中/低]等级
→ 映射VI区数据锚点
```

### 指令3: 分类强制决策 (CATEGORY_ASSIGN)
**AI触发条件**: 完成数据采集后
**分类决策框架**:
```
基于knowledge/03_研究报告/5_方法论/行业分类标准.md执行：
□ 确定主要功能 (核心价值主张)
□ 识别目标用户群体 (B2B/B2C/开发者)
□ 应用分类标准 (对照现有目录)
□ 验证分类合理性 (同类项目检查)
□ 生成归档路径 (knowledge/市场项目档案/[分类]/)
```

### 指令4: 模板对齐验证 (TEMPLATE_ALIGN)
**AI触发条件**: 内容生成前
**对齐检查清单**:
```python
# AI伪代码
def template_align_check():
    required_structure = {
        "frontmatter": ["项目名称", "关注等级", "收录日期", "更新日期", "更新摘要"],
        "sections": [
            "I 项目概览",
            "📊 II. 融资密码解析",
            "🤖 III. AI范式突破点", 
            "🚀 IV. LaunchX集成路线图",
            "V. 知识价值判断",
            "📋 VI. 完整数据溯源"
        ],
        "subsections": {
            "II": ["🎯 融资共性追踪表", "📊 核心市场数据时间轴", "投资价值判断"],
            "III": ["🎯 技术突破时间序列", "📋 同类项目对比分析"],
            "IV": ["🏷️ 能力结构化标签", "🔄 可复用性评估", "🎯 集成策略设计"],
            "V": ["📈 创业者启示", "🏢 企业建议", "🔮 行业趋势判断", "🎨 可复用商业规律"],
            "VI": ["A区-H区完整数据支撑"]
        }
    }
    return required_structure
```

---

## AI统一执行流程：四步核心循环

> **历史映射：AI内部将四步核心循环映射为六步传统流程，确保兼容性**

### AI四步核心循环

#### STEP 1: 查重扫描与模板准备 (DUPLICATE_SCAN)
**AI内部映射**: 传统第1步"结构对齐" + 第2步"信息收集"的前置验证

**AI执行逻辑**:
```python
# --- 细节注入 ---
# 项目查重: 全库搜索项目名称/公司名称/别名，避免重复录入
# 搜索模式: [项目名], [公司名], [项目名-], [公司名-], [英文名], [中文名]
# 模版复制: knowledge/@外部项目内容模版_场景化增强版.md
# 文件命名: 公司名称-简短描述.md (官方全称优先，功能描述具体化)
# 归档路径: knowledge/市场项目档案/[分类目录]/ (基于行业分类标准.md)
# 日期获取: date +%Y-%m-%d (系统命令，禁止手填)
# VI区锚点预设: A区(基础信息) B区(市场商业) C区(技术产品) D区(财务投资) E区(集成数据) F区(知识价值) G区(补充数据)
# 元数据填充: Frontmatter完整性(项目名称/关注等级/收录日期/更新日期/更新摘要)
# 总览更新: knowledge/@ai潜在学习项目总览.md 条目添加
# 缺失/重复: return DUPLICATE_PROJECT 或 NEW_PROJECT_OK
# --- 细节注入结束 ---
def step1_duplicate_scan(project_info):
    search_patterns = [
        project_info["name"], 
        project_info["company"],
        f"{project_info['name']}-",
        f"{project_info['company']}-"
    ]
    
    existing_projects = []
    for pattern in search_patterns:
        matches = search_knowledge_base(pattern)
        existing_projects.extend(matches)
    
    if existing_projects:
        return {"status": "DUPLICATE_PROJECT", "existing": existing_projects}
    
    template_structure = copy_template("knowledge/@外部项目内容模版_场景化增强版.md")
    vi_anchors = generate_vi_data_anchors()
    
    return {"status": "NEW_PROJECT_OK", "template": template_structure, "anchors": vi_anchors}
```

#### STEP 2: 数据主动采集与溯源 (DATA_HARVEST)
**AI内部映射**: 传统第3步"VI区数据注入" + 多轮递进式补全 + 历史数据源优化经验

**AI执行逻辑**:
```python
# --- 细节注入 ---
# 关键词矩阵: [项目名, 融资, 创始人, 产品新闻, ARR, 用户规模, API, 技术架构, ...]
# 优先信源: 官网/官方公告/权威媒体/第三方数据库
# 每条数据: 必须有来源链接(http/https)和可信度评级(高/中/低)
# 信源分级:
#   1. 一级(1.0): 官网/创始人/官方公告/财报
#   2. 二级(0.8): 权威媒体/VC公告/行业报告
#   3. 三级(0.6): 深度评测/用户反馈汇总/分析师报告
#   4. 四级(0.3): 社交媒体/论坛讨论/员工评价
# 多轮检索策略:
#   轮次1: 基础信息(官网/创始人/融资/团队)
#   轮次2: 市场数据(用户规模/ARR/增长/竞品)
#   轮次3: 技术细节(架构/API/集成/专利)
#   轮次4: 深度洞察(访谈/博客/分析师观点/未来规划)
# 发散性检索关键词:
#   创始人姓名+interview/podcast/blog/LinkedIn
#   公司名+TechCrunch/ProductHunt/demo/funding
#   公司名+ARR/growth/customer case/user metrics
#   公司名+API integration/technical review/architecture
# 交叉验证: 每个数据点至少2个独立信源确认
# 数据去重/合并: 合并同类项, "最新摘要+历史压缩"表格
# 信息缺失: 标注[信息暂缺] + 唯一块ID分配
# 禁止主观推断/凭空补全
# VI区为所有数据详细来源区, 分A-G区主题/表格/分级别列出
# 采集方法/完整性/时效性/局限性/可信度评估需在VI区说明
# 自动化检测: 检查每条数据有链接和评级, 检查去重/合并
# --- 细节注入结束 ---
def step2_data_harvest(project_name, vi_anchors):
    # 历史数据源优化经验整合
    harvest_pipeline = {
        "source_hierarchy": {
            "tier1_primary": {           # 权重1.0
                "company_website": "官网验证",
                "founder_statements": "创始人声明", 
                "official_announcements": "官方公告",
                "financial_reports": "财报数据"
            },
            "tier2_authoritative": {     # 权重0.8
                "vc_announcements": "VC投资公告",
                "reputable_media": "权威媒体报道",
                "industry_reports": "行业深度报告"
            },
            "tier3_industry": {          # 权重0.6
                "analyst_reports": "分析师报告",
                "conference_talks": "会议演讲",
                "patent_filings": "专利申请",
                "user_reviews": "用户反馈汇总"
            },
            "tier4_contextual": {        # 权重0.3
                "social_media": "社交媒体",
                "forum_discussions": "论坛讨论",
                "employee_reviews": "员工评价"
            }
        },
        
        "collection_strategy": {
            "round1_basics": {
                "keywords": generate_basic_keywords(project_name),
                "sources": ["company_website", "crunchbase", "linkedin", "official_pr"],
                "target_data": ["company_info", "funding_history", "team_background", "basic_metrics"],
                "vi_mapping": "A区基础信息"
            },
            
            "round2_market": {
                "keywords": generate_market_keywords(project_name),
                "sources": ["industry_reports", "user_reviews", "analyst_blogs", "competitor_analysis"],
                "target_data": ["user_metrics", "financial_data", "market_position", "tam_sam_som"],
                "vi_mapping": "B区市场商业"
            },
            
            "round3_technical": {
                "keywords": generate_tech_keywords(project_name),
                "sources": ["technical_blogs", "github", "developer_forums", "patent_office"],
                "target_data": ["tech_stack", "api_docs", "integration_cases", "architecture_details"],
                "vi_mapping": "C区技术产品"
            },
            
            "round4_insights": {
                "keywords": generate_insight_keywords(project_name),
                "sources": ["youtube", "medium", "substack", "twitter", "podcast_platforms"],
                "target_data": ["founder_insights", "market_analysis", "future_plans", "strategic_vision"],
                "vi_mapping": "F区知识价值"
            }
        },
        
        "validation_pipeline": {
            "cross_validation": "minimum_2_sources_per_datapoint",
            "quality_threshold": 80,
            "recency_weight": 0.25,
            "source_credibility": "tier_weighted_scoring"
        }
    }
    
    return harvest_pipeline
```

#### STEP 3: 内容生成与洞察提炼 (CONTENT_GEN)
**AI内部映射**: 传统第4步"深度分析" + 第5步"I-V区结论提炼"

**AI执行逻辑**:
```python
# --- 细节注入 ---
# 只基于VI区详细数据生成I-V区内容
# 模板章节严格对齐:
#   I 项目概览: 基于VI.A区生成一句话定位/核心标签/所属行业/成立时间/解决问题/核心产品/目标用户/数据飞轮
#   📊 II. 融资密码解析: 基于VI.B+D区生成🎯融资共性追踪表/📊核心市场数据时间轴/投资价值判断表格
#   🤖 III. AI范式突破点: 基于VI.C+F区生成🎯技术突破时间序列/AI价值演进轨迹/📋同类项目对比分析
#   🚀 IV. LaunchX集成路线图: 基于VI.E区生成🏷️能力结构化标签/🔄可复用性评估/🎯集成策略设计
#   V. 知识价值判断: 基于VI.F区生成📈创业者启示/🏢企业建议/🔮行业趋势判断/🎨可复用商业规律
# 主体区内容精炼, 无外链/块ID, 表格与模版一致
# 投资/集成/知识价值表格与模版一致, 所有评分/评级/结论有VI区数据支撑
# 变化描述/量化对比/AI价值体现均需有据可查
# 趋势分析: 严格执行"趋势交叉验证"(相似项目聚类→宏观趋势关联→反趋势案例排查)
# 每次录入必须有趋势洞察产出, 明确回答"此项目对宏观观察哨有何影响?"
# 趋势洞察/失败案例/风险信号等需在VI区列出数据支撑
# 革命性潜力评估: 执行knowledge/投资经验/方法论/决策经验/革命性项目潜力评估框架.md
# 分类决策: 基于knowledge/03_研究报告/5_方法论/行业分类标准.md
# 数据-结论映射: 🔗数据源: VI.X.Y格式，确保每个结论都有VI区支撑
# 创始动机挖掘: "The Why"深度分析，挖掘项目背后的战略意图
# 自动化检测: 检查内容精炼/无外链/表格一致/趋势洞察产出/模板对齐
# --- 细节注入结束 ---
def step3_content_gen(harvest_data):
    # 内部映射：第4步深度分析 + 第5步结论提炼
    content_generation = {
        "section_I_overview": generate_project_overview(harvest_data["A区基础信息"]),
        "section_II_funding": generate_funding_analysis(harvest_data["B区市场商业"], harvest_data["D区财务投资"]),
        "section_III_ai_breakthrough": generate_ai_analysis(harvest_data["C区技术产品"], harvest_data["F区知识价值"]),
        "section_IV_integration": generate_integration_roadmap(harvest_data["E区集成数据"]),
        "section_V_knowledge": generate_knowledge_insights(harvest_data["F区知识价值"]),
        "section_VI_datasource": organize_complete_datasource(harvest_data),
        
        "trend_validation": cross_reference_macro_trends(harvest_data),
        "revolutionary_assessment": apply_potential_framework(harvest_data),
        "category_decision": determine_classification(harvest_data),
        "template_alignment": ensure_template_compliance()
    }
    
    return content_generation
```

#### STEP 4: 交付验证与归档 (DELIVER_CHECK)
**AI内部映射**: 传统第6步"交付检查"的验证阶段

**AI执行逻辑**:
```python
# --- 细节注入 ---
# 按OK清单核查自动化规则逐项检测(结构/表格/元数据/数据溯源/去重/内容精炼/文件名路径/分类/趋势洞察/模板对齐)
# 结构完整性检查: 必须包含以下章节(与模板完全对齐):
#   Frontmatter: 项目名称/关注等级/收录日期/更新日期/更新摘要
#   I 项目概览 (一句话定位/核心标签/所属行业/成立时间/解决问题/核心产品/目标用户/数据飞轮)
#   📊 II. 融资密码解析 (🎯融资共性追踪表/📊核心市场数据时间轴/投资价值判断)
#   🤖 III. AI范式突破点 (🎯技术突破时间序列/AI价值演进轨迹/📋同类项目对比分析)
#   🚀 IV. LaunchX集成路线图 (🏷️能力结构化标签/🔄可复用性评估/🎯集成策略设计)
#   V. 知识价值判断 (📈创业者启示/🏢企业建议/🔮行业趋势判断/🎨可复用商业规律)
#   📋 VI. 完整数据溯源 (A-G区完整数据支撑，所有链接和块ID仅在此区域)
# 数据溯源检查: 每个结论都有VI区对应板块支撑，可信度评级完整
# 格式规范验证: 无链接/块ID在I-V区，所有链接仅在VI区，日期系统命令获取
# 表格格式检查: 融资共性追踪表/核心市场数据时间轴/投资价值判断表格与模板一致
# 章节标题检查: emoji使用正确(📊、🤖、🚀等)
# 文件路径确认: knowledge/市场项目档案/[正确分类]/项目名称-描述.md
# 批次归档记录: 批次ID/完成时间/归档路径
# 知识库同步: 总览文件更新，分类索引更新
# 质量评分: 数据完整性/结论支撑度/格式规范性/模板对齐度
# 交付确认: 文件路径通知，质量指标报告
# 自动检测未通过或边界情况, 人工复查补充
# 每次录入/归档/趋势洞察/批次经验等, 记录批次ID/完成时间/归档路径
# 自动化检测与人工复核结合, 确保零遗漏
# --- 细节注入结束 ---
def step4_deliver_check(final_content):
    # 内部映射：第6步最终验证
    validation_checklist = {
        "template_structure_match": verify_template_alignment(final_content),
        "section_completeness": verify_all_required_sections(final_content),
        "subsection_completeness": verify_all_required_subsections(final_content),
        "data_traceability": check_vi_references_complete(final_content),
        "format_compliance": validate_format_rules(final_content),
        "table_format_consistency": verify_table_formats(final_content),
        "emoji_consistency": verify_emoji_section_headers(final_content),
        "frontmatter_completeness": verify_frontmatter_fields(final_content),
        "link_restriction": verify_links_only_in_vi(final_content),
        "archive_path": confirm_correct_classification(final_content),
        "batch_recording": log_completion_metrics(final_content),
        "knowledge_sync": update_overview_files(final_content)
    }
    
    quality_score = calculate_overall_quality(validation_checklist)
    
    return {
        "status": "DELIVERED", 
        "quality": quality_score, 
        "checklist": validation_checklist,
        "batch_id": generate_batch_id(),
        "archive_path": final_content["file_path"]
    }
```

### 历史兼容性层

#### 六步传统流程 → 四步AI映射表
| 传统步骤 | AI核心步骤 | 处理阶段 | AI内部状态 |
|---|---|---|---|
| 第1步 结构对齐 | STEP 1 查重扫描 | 预处理 | `PREPARE_TEMPLATE` |
| 第2步 信息收集 | STEP 1 查重扫描 | 查重验证 | `DUPLICATE_CHECK` |
| 第3步 VI区数据注入 | STEP 2 数据采集 | 多轮检索 | `HARVEST_DATA` |
| 第4步 深度分析 | STEP 3 内容生成 | 洞察生成 | `GENERATE_INSIGHTS` |
| 第5步 I-V区提炼 | STEP 3 内容生成 | 结论映射 | `MAP_CONCLUSIONS` |
| 第6步 最终检查 | STEP 4 交付验证 | 验证交付 | `FINAL_VALIDATE` |

#### AI状态机
```
[START] → STEP1 → STEP2 → STEP3 → STEP4 → [END]
   ↓       ↓      ↓      ↓      ↓
ERROR → FIX → RETRY → WARN → COMPLETE
```

### AI统一输出格式
```json
{
  "ai_flow": "4step_core",
  "traditional_mapping": "6step_compatible",
  "current_step": "STEP1|STEP2|STEP3|STEP4",
  "status": "SUCCESS|ERROR|WARNING",
  "historical_step_equivalent": "第1-6步中的对应步骤",
  "next_action": "下一步指令"
}
```

---

## AI异常处理协议

### 项目重复异常
```
ERROR: DUPLICATE_PROJECT
ACTION: 立即进入确认模式
OUTPUT: 生成用户确认指令清单
```

### 数据采集异常  
```
ERROR: DATA_SOURCE_UNREACHABLE
ACTION: 标记[信息暂缺]
OUTPUT: 生成补充采集任务
```

### 分类决策异常
```
ERROR: CATEGORY_UNMATCHED
ACTION: 强制执行分类决策框架
OUTPUT: 生成分类建议报告
```

### 模板对齐异常
```
ERROR: TEMPLATE_MISMATCH
ACTION: 自动修复模板结构
OUTPUT: 生成修复指令清单
```

---

## AI记忆与上下文管理

### 长期记忆 (Persistent Memory)
- 当前活跃模板版本
- 历史项目录入记录
- 分类决策映射表
- 趋势观察哨最新状态

### 短期记忆 (Session Memory)  
- 本次录入批次ID
- 待验证数据清单
- 临时发现的异常信息
- 需要用户确认的项目

### 上下文切换 (Context Switch)
```
当切换项目时，AI必须:
1. 保存当前录入状态
2. 加载新项目上下文
3. 重置短期记忆
4. 保持长期记忆
```

---

## AI输出规范

### 统一返回格式 (基于SuperAnnotate & OpenEvidence实操经验)
```json
{
  "status": "SUCCESS|ERROR|WARNING",
  "step": "当前执行步骤",
  "project": "项目名称",
  "data_harvest": ["采集到的数据类型"],
  "insights": ["生成的洞察"],
  "quality_metrics": {
    "data_completeness": "95%",              // 数据完整性
    "source_reliability": "权重计算值",      // 信源可靠性
    "template_alignment": "100%",            // 模板对齐度
    "traceability_score": "98%",             // 溯源完整性
    "classification_confidence": "90%"       // 分类置信度
  },
  "validation_layers": [
    "ai_duplicate_check_passed",
    "data_harvest_complete", 
    "template_alignment_verified",
    "classification_confirmed",
    "format_validation_passed"
  ],
  "error_classification": {
    "type": "recoverable|user_confirmation|system_failure",
    "impact": "low|medium|high",
    "escalation": "level_1_auto_retry|level_2_user_notice|level_3_manual_intervention"
  },
  "archive_info": {
    "file_path": "knowledge/市场项目档案/[分类]/项目名称-描述.md",
    "classification": "确定的分类",
    "batch_id": "录入批次ID",
    "completion_time": "2025-07-21T10:30:00Z"
  },
  "performance_metrics": {
    "processing_time": "<3min_per_project",
    "data_harvest_rate": ">85%",
    "classification_accuracy": ">95%",
    "template_compliance": "100%"
  },
  "next_action": "下一步指令",
  "timestamp": "2025-07-21T10:30:00Z",
  "batch_processing": {
    "batch_id": "自动生成",
    "project_count": "当前批次数量",
    "completion_rate": "实时计算"
  }
}
```

### 错误码系统 (基于实操经验扩展)
**基础错误码 (录入级)**
- E001: 项目重复 → 立即进入确认模式
- E002: 数据源不可达 → 标记[INFO_MISSING]继续执行  
- E003: 分类无法确定 → 强制执行分类决策框架
- E004: 模板不对齐 → 自动修复并记录日志
- E005: 归档路径错误 → 重新执行分类决策

**质量错误码 (数据级)**
- E101: 数据完整性不足 (<80%) → 触发补充采集
- E102: 信源可信度过低 (<60%) → 提升信源等级要求
- E103: 模板对齐度不足 (<95%) → 强制模板修复

**性能错误码 (效率级)**
- E301: 处理时间超限 (>5min) → 启用快速模式
- E302: 批量录入失败 → 回退到单项目处理
- E303: 模板解析失败 → 重新加载模板

**业务错误码**
- E401: 行业分类冲突 → 启动分类决策框架
- E402: 模板版本不兼容 → 强制向后兼容检查
- E403: 趋势关联缺失 → 触发趋势验证

---

## AI性能优化 (基于项目录入实战经验)

### 批量录入策略 (优化版)
```yaml
# 基于项目录入实战经验
batch_processing:
  optimal_size: 5_projects          # 实测最佳批次大小
  max_concurrent: 3                 # 避免信息混淆
  cache_strategy:
    hot_cache: 5_projects          # 最近项目上下文
    warm_cache: 20_projects        # 常用模板和规则
    cold_storage: archive_after_3_days
  
  error_handling:
    retry_logic:
      max_attempts: 3               # 标准重试次数
      backoff_strategy: "exponential"
      circuit_breaker: "3_failures_in_5_minutes"
    fallback_mode: "single_project_processing"

# 基于模板对齐要求
template_compliance:
  alignment_threshold: 95           # 模板对齐度阈值
  structure_validation: "strict"    # 严格结构验证
  emoji_consistency: "required"     # 必须emoji一致性
```

### 效率指标 (经过验证)
```yaml
performance_targets:
  processing_time: "<3min_per_project"     # 单项目录入时间
  data_harvest_rate: ">85%"                # 数据采集完成率
  classification_accuracy: ">95%"          # 分类准确率
  template_compliance: "100%"              # 模板规范符合率
  
  # 新增质量SLA
  data_completeness: ">90%"                # 数据完整性
  source_reliability: ">80%"               # 信源可靠性
  traceability_score: ">95%"               # 溯源完整性
  
  # 实时监控指标
  real_time_metrics:
    - "template_alignment: >95%"
    - "section_completeness: >98%"
    - "data_source_coverage: >85%"
    - "classification_confidence: >90%"
```

### 资源弹性优化 (基于实际负载测试)
```yaml
resource_scaling:
  triggers:
    scale_up:
      - "queue_length > 10_projects"
      - "processing_time > 5min_per_project"
      - "error_rate > 5%"
    
    scale_down:
      - "queue_length < 3_projects"
      - "processing_time < 2min_per_project"
      - "idle_time > 15_minutes"
  
  cooldown_periods:
    scale_up: "1_minute"
    scale_down: "5_minutes"
    emergency: "immediate"

  # 成本优化策略
  cost_optimization:
    batch_processing: true
    template_caching: "aggressive"
    data_source_pooling: "enabled"
```

### 质量保障机制 (实战验证)
```yaml
quality_assurance:
  # 三层验证体系
  validation_layers:
    layer_1_ai_preflight:
      coverage: "100%"
      checks: ["duplicate", "template", "basic_data"]
      
    layer_2_content_validation:
      coverage: "100%"
      checks: ["structure", "format", "data_traceability"]
      
    layer_3_final_audit:
      coverage: "100%"
      checks: ["template_alignment", "classification", "archive_path"]
  
  # 性能监控仪表板
  monitoring_dashboard:
    - "project_intake_rate"
    - "template_compliance_score"
    - "data_harvest_success_rate"
    - "classification_accuracy"
    - "archive_completion_rate"
  
  # 预警机制
  early_warning:
    template_drift: "alignment_drop > 5%"
    data_quality: "source_reliability < 75%"
    processing_delay: "time_increase > 100%"
    classification_conflict: "confidence < 80%"
```

---

## 附录：参考规范 (Appendices: Reference Specifications)

### **4.1 目录结构与归档规则**
- **存放根目录**: `knowledge/市场项目档案/`
- **分类标准**: 严格遵循 `knowledge/03_研究报告/5_方法论/行业分类标准.md` 中的分类体系
- **归档逻辑**:
  - **强制分类优先**: 在进行任何归档操作前，必须首先依据《[行业分类标准.md](<knowledge/03_研究报告/5_方法论/行业分类标准.md>)》对项目进行分类。该分类将决定文件最终的存储位置。
  - **优先归入现有目录**: 新文件必须优先归纳到现有的一级或二级目录下。
  - **禁止创建新目录**: 禁止自行创建新的一级或二级目录。若无明确分类，应将文件置于最相关的一级目录下。
  - **文件位置确认**: 归档完成后，确认文件位于正确的子目录中，路径格式为 `knowledge/市场项目档案/[一级目录]/[二级目录]/项目名称-描述.md`
  - **模版文件**: 使用 `knowledge/@外部项目内容模版_场景化增强版.md` 作为标准模版
- **分类决策流程**:
  1. **确定主要功能**: 分析项目的核心功能和主要用途，识别目标用户群体
  2. **应用分类标准**: 对照行业分类标准中的定义和判断标准，选择最匹配的分类
  3. **验证分类**: 检查同类项目是否在同一分类，确认分类的合理性
  4. **位置确认**: 确认最终归档位置与分类决策一致
- **目录定义** (参考行业分类标准):
  - **创意内容**: 内容创作与媒体生成工具（图像、视频、音频、文本、3D、品牌内容）
  - **Ai行业垂直解决方案**: 针对特定行业的AI方案（医疗、教育、娱乐、安全、游戏等）
  - **效率与优化工具**: 提升个人或团队效率的工具（个人助手、团队协作、流程自动化、开发者工具）
  - **企业服务**: 面向企业的AI服务（人才管理、市场洞察、合规监管、企业安全）
  - **营销增长与销售工具**: AI驱动的营销、销售和增长工具
  - **通用大模型与AI平台&基础设施**: 通用AI模型、平台及基础设施项目
  - **知识库**: 知识管理和信息组织工具
  - **外部渠道项目**: 通过外部渠道获取或合作的项目
  - **市场研究与用户洞察**: 市场分析、用户行为研究相关的项目和报告
  - **综合分析**: 跨领域的综合分析报告和专题研究
- **归纳方式**:
  - **按功能分类**: 根据项目的主要功能和目标用户进行分类
  - **按行业分类**: 对于垂直行业项目，按服务行业进行分类
  - **按技术分类**: 对于基础设施项目，按技术类型进行分类
  - **交叉引用**: 在档案中注明相关分类，便于跨领域检索

### **4.2 文件命名规范**
- **格式**: `公司名称-简短描述.md`
- **公司名称**: 必须与用户提供的项目列表或资料中的官方名称完全一致。
- **简短描述**: 准确概括项目的核心功能或服务。
- **确认时机**: 在生成文件前，必须根据资料确认名称。如有歧义，需向用户确认。

### **4.3 块ID与链接格式 (简化)**
- **块ID**: 仅在VI区使用，格式为 `^数据类型_简述` 
- **链接**: 仅在VI区使用标准Markdown格式

---

> **AI执行确认**: 本规则文件为AI原生优化版本，所有指令均可直接执行。每次录入后，AI必须在此处记录执行时间和结果摘要。